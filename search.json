[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "WS 25/26 Numerik 0 Notes",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Intro",
    "section": "",
    "text": "1.1 Repo structure and Usage",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro</span>"
    ]
  },
  {
    "objectID": "intro.html#repo-structure-and-usage",
    "href": "intro.html#repo-structure-and-usage",
    "title": "1  Intro",
    "section": "",
    "text": "Repo Layout\nnum-sol-ws2526/\n├─ hdnum/               # submodule\n├─ CMakeLists.txt       # builds all src/ubN targets\n├─ src/\n│  ├─ ub1/\n│  │  ├─ CMakeLists.txt\n│  │  └─ ub1_task1.cpp\n│  └─ ub2/\n│     └─ CMakeLists.txt\n├─ theory/\n│  ├─ ub1/\n│  └─ ub2/\n└─ .github/workflows/build.yml\n\n\nTeammate onboarding snippet\nSend them this:\n# First-time clone (includes submodule)\ngit clone --recurse-submodules https://github.com/igor-dimi/num-sol-ws2526.git\ncd num-sol-ws2526\n\n# Build\ncd src/\ncmake -S . -B build -DCMAKE_BUILD_TYPE=Release\ncmake --build build -j\n\n# Create your branch for this week\ngit checkout -b ub1_&lt;yourname&gt;\n# ...work...\ngit commit -am \"ub1: your message\"\ngit push -u origin ub1_&lt;yourname&gt;\n\n\nDay-to-day workflow (lightweight)\n\nSync main (everyone):\ngit checkout main\ngit pull --ff-only\ngit submodule update --init --recursive\nWork on a branch for the week:\ngit checkout -b ub1_igor\n# edit src/ub1/... and theory/ub1/...\ncmake -S . -B build -DCMAKE_BUILD_TYPE=Release   # usually only first time\ncmake --build build -j                           # build locally\ngit add -A\ngit commit -m \"ub1: implement task1; add notes\"\ngit push -u origin ub1_igor\nMerge strategy:\n\nIf your changes don’t conflict and are small: either open a PR and self-merge after CI is green or fast-forward/merge to main directly.\nIf you both touched the same files or it’s risky: open a PR and ask for a quick review.\n\n\n\nWith this setup we don’t enable branch protection. CI will still run and show you if main breaks, but it won’t block merges.\n\n\n\nOptional niceties (quick wins)\n\nLabels: create ub1, ub2, … labels; tag issues/PRs by sheet.\nCODEOWNERS (optional): .github/CODEOWNERS\n/src/ub1/  @igor-dimi @teammate\n/src/ub2/  @igor-dimi @teammate\n(This just auto-requests reviews; it won’t block merges unless you add protection later.)\nCI variants: if you don’t want GMP on CI, drop libgmp-dev and keep HDNUM_USE_GMP=OFF as default in CMake.\n\n\n\nExample Workflow\nTwo options:\n\nlinear (rebase + fast-forward) way first (preferred),\n\nsimple merge commits way.\n\n\n\nA) Linear history (rebase each branch onto main, then fast-forward)\nThis avoids “merge bubbles” and keeps history tidy.\n\n1) Merge your branch\n#### make sure main is up to date\ngit checkout main\ngit pull --ff-only\n\n#### rebase your branch on top of the latest main\ngit checkout ub1_igor\ngit fetch origin\ngit rebase origin/main        # resolve conflicts if any: edit -&gt; git add -&gt; git rebase --continue\n\n#### sanity check\ncd src/\ncmake --build build -j || { echo \"Fix build before merging\"; exit 1; }\n\n#### fast-forward main to include your branch\ngit checkout main\ngit merge --ff-only ub1_igor  # will fail if rebase wasn't done; that's good\ngit push\n\n\n2) Merge your teammate’s branch\ngit checkout ub1_malte\ngit fetch origin\ngit rebase origin/main        # now 'main' already contains your work\n#### resolve conflicts if any -&gt; git add -&gt; git rebase --continue\n\ncmake --build build -j # from the src folder\n\ngit checkout main\ngit merge --ff-only ub1_malte\ngit push\n\nIf during the rebase you had already pushed your branch earlier, you’ll need to update it (optional) with:\ngit push --force-with-lease\nUse --force-with-lease (not plain --force) to avoid clobbering a teammate’s work accidentally.\n\n\n\n\n\nB) Simple merge commits (no rebases)\nThis is quickest if you don’t care about a perfectly linear history.\ngit checkout main\ngit pull --ff-only\n\n#### merge your branch\ngit merge --no-ff ub1_igor    # creates a merge commit even if FF would be possible\n#### or: git merge ub1_igor      # lets Git fast-forward if possible\ncmake --build build -j\ngit push\n\n#### merge your teammate's branch\ngit merge --no-ff ub1_malte\n#### resolve conflicts if prompted: edit -&gt; git add &lt;files&gt; -&gt; git commit\ncmake --build build -j\ngit push\n\n\nConflict handling (both methods)\n\nGit stops and shows CONFLICT markers if you happened to touch the same lines.\nOpen the files, keep the correct pieces, then:\ngit add &lt;fixed-files&gt;\n# continue the operation:\n# - during rebase: git rebase --continue\n# - during merge:  git commit\nRebuild locally; only push once it compiles.\n\n\n\n\nSubmodule note\nIf neither branch changed the hdnum submodule pointer, nothing special. If one did, after merging:\ngit submodule update --init --recursive\n\n\n\n\nWhich to choose?\n\nA) Rebase + --ff-only: best if you value a clean, straight history.\nB) Merge commits: fine for a small class repo; fewer commands; history will have merge nodes.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro</span>"
    ]
  },
  {
    "objectID": "intro.html#cmake",
    "href": "intro.html#cmake",
    "title": "1  Intro",
    "section": "1.2 CMAKE",
    "text": "1.2 CMAKE\n\n2) Top-level CMake for examples (code_examples/my_solutions/CMakeLists.txt)\n\nDefines a shared INTERFACE target hdnum_common (provides include paths, optional GMP).\nAdds each chapter as a subdirectory if it exists.\n\ncmake_minimum_required(VERSION 3.16)\nproject(numerics_solutions CXX)\nset(CMAKE_CXX_STANDARD 20)\n\n# Put binaries under build/bin/ubX/\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin\")\n\n# hdnum include dir (submodule at repo root)\nset(HDNUM_DIR \"../hdnum\")\n\n# Shared interface target with include path (and optional GMP)\nadd_library(hdnum_common INTERFACE)\ntarget_include_directories(hdnum_common INTERFACE \"${HDNUM_DIR}\")\n\noption(HDNUM_USE_GMP \"Enable GMP in hdnum\" OFF)\nif(HDNUM_USE_GMP)\n  target_compile_definitions(hdnum_common INTERFACE HDNUM_HAS_GMP=1)\n  find_library(GMPXX gmpxx)\n  find_library(GMP   gmp)\n  if(GMPXX AND GMP)\n    target_link_libraries(hdnum_common INTERFACE ${GMPXX} ${GMP})\n  else()\n    message(FATAL_ERROR \"GMP not found; install libgmp-dev or disable HDNUM_USE_GMP\")\n  endif()\nendif()\n\n# Add each UB subdir in src/ if it has a CMakeLists.txt\nforeach(ub IN ITEMS ub1 ub2 ub3 ub4 ub5 ub6 ub7 ub8 ub9 ub10)\n  if(EXISTS \"${CMAKE_CURRENT_LIST_DIR}/${ub}/CMakeLists.txt\")\n    add_subdirectory(\"${ub}\")\n  endif()\nendforeach()\n\n\n3) Per UB-folder CMake with per-Ub output folders\n\nEach chapter decides which executables to build.\nPer-chapter runtime output goes to build/bin/&lt;chapter&gt;/ (and per-config subfolders on multi-config generators).\n\nset(UB ub1)\n\n# Group executables per UB on disk (and per-config for multi-config generators)\nset(OUT \"${CMAKE_BINARY_DIR}/bin/${UB}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${OUT}\")\nforeach(cfg IN ITEMS Debug Release RelWithDebInfo MinSizeRel)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${cfg} \"${OUT}/${cfg}\")\nendforeach()\n\nfunction(add_ub_example name)\n  add_executable(${name} \"${name}.cpp\")\n  target_link_libraries(${name} PRIVATE hdnum_common)\n  set_target_properties(${name} PROPERTIES FOLDER \"${UB}\") # IDE grouping\nendfunction()\n\n# List ub1 binaries here:\nadd_ub_example(ub1_task1)\nadd_ub_example(ub1_task2)\n\nRepeat a similar CMakeLists.txt in src/ub02, src/ueb03, … adding that chapter’s .cpp files.\n\n\n\n4) Build commands (configure once, then build)\nSingle-config (Linux/Mint, Makefiles/Ninja):\ncd src\n### configure (once per build dir or when options/CMakeLists change)\ncmake -S . -B build -DCMAKE_BUILD_TYPE=Release               # + -DHDNUM_USE_GMP=ON if needed\n### build (repeat as you edit sources)\ncmake --build build -j\nOutputs\nbuild/bin/ub01/ub01_ode_demo\nbuild/bin/ub01/ub01_newton_demo\nbuild/bin/ub02/...\n\n\n5) Using GMP (high precision) without editing submodule\n\nInstall dev package: sudo apt install -y libgmp-dev\nEnable once at configure time (persists in the build cache):\ncmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DHDNUM_USE_GMP=ON\nCMake finds and links gmpxx/gmp, and defines HDNUM_HAS_GMP=1 for all examples via hdnum_common.\n\n\nTip: keep two build dirs if you switch often:\ncmake -S . -B build         -DCMAKE_BUILD_TYPE=Release -DHDNUM_USE_GMP=OFF\ncmake -S . -B build-gmp     -DCMAKE_BUILD_TYPE=Release -DHDNUM_USE_GMP=ON\ncmake --build build\ncmake --build build-gmp\n\n\n\n6) Troubleshooting quickies\n\nfatal error: hdnum.hh: No such file or directory → HDNUM_DIR wrong; ensure submodule is initialized; include path points at the folder that contains hdnum.hh.\nGMP not found → install libgmp-dev; reconfigure; or pass custom -DCMAKE_LIBRARY_PATH=/path -DCMAKE_INCLUDE_PATH=/path.\nChanging HDNUM_USE_GMP or editing CMakeLists.txt → reconfigure (rerun the cmake -S . -B build ... step). Otherwise just cmake --build build -j.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro</span>"
    ]
  }
]